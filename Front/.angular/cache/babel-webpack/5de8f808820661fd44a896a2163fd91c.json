{"ast":null,"code":"import _asyncToGenerator from \"D:/Licenta/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { registerEmailValidator } from '../validators/register-email.validator';\nlet RegisterComponent = class RegisterComponent {\n  constructor(user, userService, router, notifyService) {\n    this.user = user;\n    this.userService = userService;\n    this.router = router;\n    this.notifyService = notifyService;\n    this.submitted = false;\n  }\n\n  ngOnInit() {\n    this.registerForm = new FormGroup({\n      first_name: new FormControl('', Validators.required),\n      last_name: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email], registerEmailValidator(this.userService)),\n      password: new FormControl('', [Validators.required, Validators.minLength(8)])\n    });\n  }\n\n  showToasterSuccess() {\n    this.notifyService.showSuccess(\"Registration successful !!\");\n  }\n\n  onRegister(registerForm) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.submitted = true;\n\n      if (registerForm.valid) {\n        _this.userService.addUser(registerForm.value).subscribe({\n          next: response => {\n            console.log(response);\n          },\n          error: error => {\n            alert(error.message);\n          }\n        });\n\n        _this.showToasterSuccess();\n\n        yield new Promise(f => setTimeout(f, 1000));\n\n        _this.router.navigate(['/login'], {\n          queryParams: {\n            registered: 'true'\n          }\n        });\n      }\n    })();\n  }\n\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})], RegisterComponent);\nexport { RegisterComponent };","map":{"version":3,"sources":["D:/Licenta/Front/src/app/register/register.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","Validators","registerEmailValidator","RegisterComponent","constructor","user","userService","router","notifyService","submitted","ngOnInit","registerForm","first_name","required","last_name","email","password","minLength","showToasterSuccess","showSuccess","onRegister","valid","addUser","value","subscribe","next","response","console","log","error","alert","message","Promise","f","setTimeout","navigate","queryParams","registered","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,gBAAnD;AACA,SAASC,sBAAT,QAAuC,wCAAvC;AACA,IAAIC,iBAAiB,GAAG,MAAMA,iBAAN,CAAwB;AAC5CC,EAAAA,WAAW,CAACC,IAAD,EAAOC,WAAP,EAAoBC,MAApB,EAA4BC,aAA5B,EAA2C;AAClD,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKC,YAAL,GAAoB,IAAIX,SAAJ,CAAc;AAC9BY,MAAAA,UAAU,EAAE,IAAIb,WAAJ,CAAgB,EAAhB,EAAoBE,UAAU,CAACY,QAA/B,CADkB;AAE9BC,MAAAA,SAAS,EAAE,IAAIf,WAAJ,CAAgB,EAAhB,EAAoBE,UAAU,CAACY,QAA/B,CAFmB;AAG9BE,MAAAA,KAAK,EAAE,IAAIhB,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACY,QAAZ,EAAsBZ,UAAU,CAACc,KAAjC,CAApB,EAA6Db,sBAAsB,CAAC,KAAKI,WAAN,CAAnF,CAHuB;AAI9BU,MAAAA,QAAQ,EAAE,IAAIjB,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACY,QAAZ,EAAsBZ,UAAU,CAACgB,SAAX,CAAqB,CAArB,CAAtB,CAApB;AAJoB,KAAd,CAApB;AAMH;;AACDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKV,aAAL,CAAmBW,WAAnB,CAA+B,4BAA/B;AACH;;AACKC,EAAAA,UAAU,CAACT,YAAD,EAAe;AAAA;;AAAA;AAC3B,MAAA,KAAI,CAACF,SAAL,GAAiB,IAAjB;;AACA,UAAIE,YAAY,CAACU,KAAjB,EAAwB;AACpB,QAAA,KAAI,CAACf,WAAL,CAAiBgB,OAAjB,CAAyBX,YAAY,CAACY,KAAtC,EAA6CC,SAA7C,CAAuD;AACnDC,UAAAA,IAAI,EAAGC,QAAD,IAAc;AAChBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACH,WAHkD;AAInDG,UAAAA,KAAK,EAAGA,KAAD,IAAW;AACdC,YAAAA,KAAK,CAACD,KAAK,CAACE,OAAP,CAAL;AACH;AANkD,SAAvD;;AAQA,QAAA,KAAI,CAACb,kBAAL;;AACA,cAAM,IAAIc,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA3B,CAAN;;AACA,QAAA,KAAI,CAAC1B,MAAL,CAAY4B,QAAZ,CAAqB,CAAC,QAAD,CAArB,EAAiC;AAAEC,UAAAA,WAAW,EAAE;AAAEC,YAAAA,UAAU,EAAE;AAAd;AAAf,SAAjC;AACH;AAd0B;AAe9B;;AAlC2C,CAAhD;AAoCAlC,iBAAiB,GAAGN,UAAU,CAAC,CAC3BC,SAAS,CAAC;AACNwC,EAAAA,QAAQ,EAAE,cADJ;AAENC,EAAAA,WAAW,EAAE,2BAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,0BAAD;AAHL,CAAD,CADkB,CAAD,EAM3BrC,iBAN2B,CAA9B;AAOA,SAASA,iBAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { registerEmailValidator } from '../validators/register-email.validator';\r\nlet RegisterComponent = class RegisterComponent {\r\n    constructor(user, userService, router, notifyService) {\r\n        this.user = user;\r\n        this.userService = userService;\r\n        this.router = router;\r\n        this.notifyService = notifyService;\r\n        this.submitted = false;\r\n    }\r\n    ngOnInit() {\r\n        this.registerForm = new FormGroup({\r\n            first_name: new FormControl('', Validators.required),\r\n            last_name: new FormControl('', Validators.required),\r\n            email: new FormControl('', [Validators.required, Validators.email], registerEmailValidator(this.userService)),\r\n            password: new FormControl('', [Validators.required, Validators.minLength(8)])\r\n        });\r\n    }\r\n    showToasterSuccess() {\r\n        this.notifyService.showSuccess(\"Registration successful !!\");\r\n    }\r\n    async onRegister(registerForm) {\r\n        this.submitted = true;\r\n        if (registerForm.valid) {\r\n            this.userService.addUser(registerForm.value).subscribe({\r\n                next: (response) => {\r\n                    console.log(response);\r\n                },\r\n                error: (error) => {\r\n                    alert(error.message);\r\n                }\r\n            });\r\n            this.showToasterSuccess();\r\n            await new Promise(f => setTimeout(f, 1000));\r\n            this.router.navigate(['/login'], { queryParams: { registered: 'true' } });\r\n        }\r\n    }\r\n};\r\nRegisterComponent = __decorate([\r\n    Component({\r\n        selector: 'app-register',\r\n        templateUrl: './register.component.html',\r\n        styleUrls: ['./register.component.css']\r\n    })\r\n], RegisterComponent);\r\nexport { RegisterComponent };\r\n"]},"metadata":{},"sourceType":"module"}