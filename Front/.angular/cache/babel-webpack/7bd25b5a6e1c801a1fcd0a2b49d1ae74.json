{"ast":null,"code":"import _asyncToGenerator from \"D:/Licenta/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet AddTreatmentComponent = class AddTreatmentComponent {\n  constructor(notifyService, userService, treatmentService, diagnosticSerivce, token) {\n    this.notifyService = notifyService;\n    this.userService = userService;\n    this.treatmentService = treatmentService;\n    this.diagnosticSerivce = diagnosticSerivce;\n    this.token = token;\n    this.submitted = false;\n    this.submittedRad = false;\n  }\n\n  showToasterSuccess() {\n    this.notifyService.showSuccess(\"Date adaugate cu succes !!\");\n  }\n\n  ngOnInit() {\n    this.currentUser = this.token.getUser();\n    this.treatmentForm = new FormGroup({\n      email: new FormControl('', Validators.required),\n      treatment: new FormControl('', Validators.required),\n      diagnostic: new FormControl('', Validators.required)\n    });\n    this.radiografieForm = new FormGroup({\n      email: new FormControl('', Validators.required),\n      radiografie: new FormControl('', Validators.required)\n    });\n    this.userService.findUser(this.currentUser.email).subscribe({\n      next: response => {\n        this.loggedInUser = response;\n        console.log(this.loggedInUser);\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n    this.getDiagnostics();\n    this.getTreatments();\n    this.getUsers();\n  }\n\n  getUsers() {\n    this.userService.getUsers().subscribe({\n      next: response => {\n        this.users = response;\n        console.log(this.users);\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  getDiagnostics() {\n    this.diagnosticSerivce.getDiagnostics().subscribe({\n      next: response => {\n        this.diagnostics = response;\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  getTreatments() {\n    this.treatmentService.getTreatments().subscribe({\n      next: response => {\n        this.treatments = response;\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  onSubmit(treatmentForm) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.submitted = true;\n\n      if (treatmentForm.valid) {\n        _this.userService.updateTreatment(_this.treatmentForm.get('email').value, _this.treatmentForm.get('treatment').value).subscribe({\n          next: response => {\n            console.log(response);\n          },\n          error: error => {\n            alert(error.message);\n          }\n        });\n\n        _this.userService.updateDiagnostic(_this.treatmentForm.get('email').value, _this.treatmentForm.get('diagnostic').value).subscribe({\n          next: response => {\n            console.log(response);\n          },\n          error: error => {\n            alert(error.message);\n          }\n        });\n\n        _this.showToasterSuccess();\n\n        yield new Promise(f => setTimeout(f, 1000));\n        treatmentForm.reset();\n        _this.submitted = false;\n      }\n    })();\n  }\n\n  onSubmitRad(radiografieForm) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.submittedRad = true;\n\n      if (radiografieForm.valid) {\n        _this2.showToasterSuccess();\n\n        yield new Promise(f => setTimeout(f, 1000));\n        radiografieForm.reset();\n        _this2.submittedRad = false;\n      }\n    })();\n  }\n\n};\nAddTreatmentComponent = __decorate([Component({\n  selector: 'app-add-treatment',\n  templateUrl: './add-treatment.component.html',\n  styleUrls: ['./add-treatment.component.css']\n})], AddTreatmentComponent);\nexport { AddTreatmentComponent };","map":{"version":3,"sources":["D:/Licenta/Front/src/app/add-treatment/add-treatment.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","Validators","AddTreatmentComponent","constructor","notifyService","userService","treatmentService","diagnosticSerivce","token","submitted","submittedRad","showToasterSuccess","showSuccess","ngOnInit","currentUser","getUser","treatmentForm","email","required","treatment","diagnostic","radiografieForm","radiografie","findUser","subscribe","next","response","loggedInUser","console","log","error","alert","message","getDiagnostics","getTreatments","getUsers","users","diagnostics","treatments","onSubmit","valid","updateTreatment","get","value","updateDiagnostic","Promise","f","setTimeout","reset","onSubmitRad","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nlet AddTreatmentComponent = class AddTreatmentComponent {\r\n    constructor(notifyService, userService, treatmentService, diagnosticSerivce, token) {\r\n        this.notifyService = notifyService;\r\n        this.userService = userService;\r\n        this.treatmentService = treatmentService;\r\n        this.diagnosticSerivce = diagnosticSerivce;\r\n        this.token = token;\r\n        this.submitted = false;\r\n        this.submittedRad = false;\r\n    }\r\n    showToasterSuccess() {\r\n        this.notifyService.showSuccess(\"Date adaugate cu succes !!\");\r\n    }\r\n    ngOnInit() {\r\n        this.currentUser = this.token.getUser();\r\n        this.treatmentForm = new FormGroup({\r\n            email: new FormControl('', Validators.required),\r\n            treatment: new FormControl('', Validators.required),\r\n            diagnostic: new FormControl('', Validators.required)\r\n        });\r\n        this.radiografieForm = new FormGroup({\r\n            email: new FormControl('', Validators.required),\r\n            radiografie: new FormControl('', Validators.required)\r\n        });\r\n        this.userService.findUser(this.currentUser.email).subscribe({\r\n            next: (response) => {\r\n                this.loggedInUser = response;\r\n                console.log(this.loggedInUser);\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n        this.getDiagnostics();\r\n        this.getTreatments();\r\n        this.getUsers();\r\n    }\r\n    getUsers() {\r\n        this.userService.getUsers().subscribe({\r\n            next: (response) => {\r\n                this.users = response;\r\n                console.log(this.users);\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    getDiagnostics() {\r\n        this.diagnosticSerivce.getDiagnostics().subscribe({\r\n            next: (response) => {\r\n                this.diagnostics = response;\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    getTreatments() {\r\n        this.treatmentService.getTreatments().subscribe({\r\n            next: (response) => {\r\n                this.treatments = response;\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    async onSubmit(treatmentForm) {\r\n        this.submitted = true;\r\n        if (treatmentForm.valid) {\r\n            this.userService.updateTreatment(this.treatmentForm.get('email').value, this.treatmentForm.get('treatment').value).subscribe({\r\n                next: (response) => {\r\n                    console.log(response);\r\n                },\r\n                error: (error) => {\r\n                    alert(error.message);\r\n                }\r\n            });\r\n            this.userService.updateDiagnostic(this.treatmentForm.get('email').value, this.treatmentForm.get('diagnostic').value).subscribe({\r\n                next: (response) => {\r\n                    console.log(response);\r\n                },\r\n                error: (error) => {\r\n                    alert(error.message);\r\n                }\r\n            });\r\n            this.showToasterSuccess();\r\n            await new Promise(f => setTimeout(f, 1000));\r\n            treatmentForm.reset();\r\n            this.submitted = false;\r\n        }\r\n    }\r\n    async onSubmitRad(radiografieForm) {\r\n        this.submittedRad = true;\r\n        if (radiografieForm.valid) {\r\n            this.showToasterSuccess();\r\n            await new Promise(f => setTimeout(f, 1000));\r\n            radiografieForm.reset();\r\n            this.submittedRad = false;\r\n        }\r\n    }\r\n};\r\nAddTreatmentComponent = __decorate([\r\n    Component({\r\n        selector: 'app-add-treatment',\r\n        templateUrl: './add-treatment.component.html',\r\n        styleUrls: ['./add-treatment.component.css']\r\n    })\r\n], AddTreatmentComponent);\r\nexport { AddTreatmentComponent };\r\n"]},"metadata":{},"sourceType":"module"}