{"ast":null,"code":"import _asyncToGenerator from \"D:/Licenta/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet AccesComponent = class AccesComponent {\n  constructor(token, accesService, userService, notifyService) {\n    this.token = token;\n    this.accesService = accesService;\n    this.userService = userService;\n    this.notifyService = notifyService;\n    this.submitted = false;\n  }\n\n  showToasterSuccess() {\n    this.notifyService.showSuccess(\"Accesul utilizatorului a fost modificat !!\");\n  }\n\n  ngOnInit() {\n    this.currentUser = this.token.getUser();\n    this.accesForm = new FormGroup({\n      email: new FormControl(''),\n      id_doctor: new FormControl(''),\n      adaugareTratament: new FormControl('', Validators.required),\n      adaugareRadiografie: new FormControl('', Validators.required),\n      stergereCont: new FormControl('', Validators.required),\n      afisareFormular: new FormControl('', Validators.required)\n    });\n    this.userService.findUser(this.currentUser.email).subscribe({\n      next: response => {\n        this.loggedInUser = response;\n        console.log(this.loggedInUser);\n        this.userService.findUsersByEmail(this.loggedInUser.id).subscribe({\n          next: response => {\n            this.users = response;\n            console.log(this.users);\n          },\n          error: error => {\n            alert(error.message);\n          }\n        });\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  onSubmit(accesForm) {\n    var _this = this;\n\n    this.submitted = true;\n\n    if (accesForm.valid) {\n      this.accesForm.value['id_doctor'] = this.loggedInUser.id;\n      this.accesService.deleteAcces(this.accesForm.value['email']).subscribe({\n        next: () => {\n          console.log(\"deleted\");\n          this.accesService.addAcces(accesForm.value).subscribe({\n            next: function () {\n              var _ref = _asyncToGenerator(function* (response) {\n                console.log(_this.users);\n\n                _this.showToasterSuccess();\n\n                yield new Promise(f => setTimeout(f, 1000));\n                window.location.reload();\n                _this.submitted = false;\n              });\n\n              return function next(_x) {\n                return _ref.apply(this, arguments);\n              };\n            }(),\n            error: error => {\n              alert(error.message);\n            }\n          });\n        }\n      });\n    }\n  }\n\n};\nAccesComponent = __decorate([Component({\n  selector: 'app-acces',\n  templateUrl: './acces.component.html',\n  styleUrls: ['./acces.component.css']\n})], AccesComponent);\nexport { AccesComponent };","map":{"version":3,"sources":["D:/Licenta/Front/src/app/acces/acces.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","Validators","AccesComponent","constructor","token","accesService","userService","notifyService","submitted","showToasterSuccess","showSuccess","ngOnInit","currentUser","getUser","accesForm","email","id_doctor","adaugareTratament","required","adaugareRadiografie","stergereCont","afisareFormular","findUser","subscribe","next","response","loggedInUser","console","log","findUsersByEmail","id","users","error","alert","message","onSubmit","valid","value","deleteAcces","addAcces","Promise","f","setTimeout","window","location","reload","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,gBAAnD;AACA,IAAIC,cAAc,GAAG,MAAMA,cAAN,CAAqB;AACtCC,EAAAA,WAAW,CAACC,KAAD,EAAQC,YAAR,EAAsBC,WAAtB,EAAmCC,aAAnC,EAAkD;AACzD,SAAKH,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACH;;AACDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKF,aAAL,CAAmBG,WAAnB,CAA+B,4CAA/B;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKC,WAAL,GAAmB,KAAKR,KAAL,CAAWS,OAAX,EAAnB;AACA,SAAKC,SAAL,GAAiB,IAAId,SAAJ,CAAc;AAC3Be,MAAAA,KAAK,EAAE,IAAIhB,WAAJ,CAAgB,EAAhB,CADoB;AAE3BiB,MAAAA,SAAS,EAAE,IAAIjB,WAAJ,CAAgB,EAAhB,CAFgB;AAG3BkB,MAAAA,iBAAiB,EAAE,IAAIlB,WAAJ,CAAgB,EAAhB,EAAoBE,UAAU,CAACiB,QAA/B,CAHQ;AAI3BC,MAAAA,mBAAmB,EAAE,IAAIpB,WAAJ,CAAgB,EAAhB,EAAoBE,UAAU,CAACiB,QAA/B,CAJM;AAK3BE,MAAAA,YAAY,EAAE,IAAIrB,WAAJ,CAAgB,EAAhB,EAAoBE,UAAU,CAACiB,QAA/B,CALa;AAM3BG,MAAAA,eAAe,EAAE,IAAItB,WAAJ,CAAgB,EAAhB,EAAoBE,UAAU,CAACiB,QAA/B;AANU,KAAd,CAAjB;AAQA,SAAKZ,WAAL,CAAiBgB,QAAjB,CAA0B,KAAKV,WAAL,CAAiBG,KAA3C,EAAkDQ,SAAlD,CAA4D;AACxDC,MAAAA,IAAI,EAAGC,QAAD,IAAc;AAChB,aAAKC,YAAL,GAAoBD,QAApB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,YAAjB;AACA,aAAKpB,WAAL,CAAiBuB,gBAAjB,CAAkC,KAAKH,YAAL,CAAkBI,EAApD,EAAwDP,SAAxD,CAAkE;AAC9DC,UAAAA,IAAI,EAAGC,QAAD,IAAc;AAChB,iBAAKM,KAAL,GAAaN,QAAb;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAKG,KAAjB;AACH,WAJ6D;AAK9DC,UAAAA,KAAK,EAAGA,KAAD,IAAW;AACdC,YAAAA,KAAK,CAACD,KAAK,CAACE,OAAP,CAAL;AACH;AAP6D,SAAlE;AASH,OAbuD;AAcxDF,MAAAA,KAAK,EAAGA,KAAD,IAAW;AACdC,QAAAA,KAAK,CAACD,KAAK,CAACE,OAAP,CAAL;AACH;AAhBuD,KAA5D;AAkBH;;AACDC,EAAAA,QAAQ,CAACrB,SAAD,EAAY;AAAA;;AAChB,SAAKN,SAAL,GAAiB,IAAjB;;AACA,QAAIM,SAAS,CAACsB,KAAd,EAAqB;AACjB,WAAKtB,SAAL,CAAeuB,KAAf,CAAqB,WAArB,IAAoC,KAAKX,YAAL,CAAkBI,EAAtD;AACA,WAAKzB,YAAL,CAAkBiC,WAAlB,CAA8B,KAAKxB,SAAL,CAAeuB,KAAf,CAAqB,OAArB,CAA9B,EAA6Dd,SAA7D,CAAuE;AACnEC,QAAAA,IAAI,EAAE,MAAM;AACRG,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,eAAKvB,YAAL,CAAkBkC,QAAlB,CAA2BzB,SAAS,CAACuB,KAArC,EAA4Cd,SAA5C,CAAsD;AAClDC,YAAAA,IAAI;AAAA,2CAAE,WAAOC,QAAP,EAAoB;AACtBE,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACG,KAAjB;;AACA,gBAAA,KAAI,CAACtB,kBAAL;;AACA,sBAAM,IAAI+B,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA3B,CAAN;AACAE,gBAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACA,gBAAA,KAAI,CAACrC,SAAL,GAAiB,KAAjB;AACH,eANG;;AAAA;AAAA;AAAA;AAAA,eAD8C;AAQlDwB,YAAAA,KAAK,EAAGA,KAAD,IAAW;AACdC,cAAAA,KAAK,CAACD,KAAK,CAACE,OAAP,CAAL;AACH;AAViD,WAAtD;AAYH;AAfkE,OAAvE;AAiBH;AACJ;;AA9DqC,CAA1C;AAgEAhC,cAAc,GAAGL,UAAU,CAAC,CACxBC,SAAS,CAAC;AACNgD,EAAAA,QAAQ,EAAE,WADJ;AAENC,EAAAA,WAAW,EAAE,wBAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,uBAAD;AAHL,CAAD,CADe,CAAD,EAMxB9C,cANwB,CAA3B;AAOA,SAASA,cAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nlet AccesComponent = class AccesComponent {\r\n    constructor(token, accesService, userService, notifyService) {\r\n        this.token = token;\r\n        this.accesService = accesService;\r\n        this.userService = userService;\r\n        this.notifyService = notifyService;\r\n        this.submitted = false;\r\n    }\r\n    showToasterSuccess() {\r\n        this.notifyService.showSuccess(\"Accesul utilizatorului a fost modificat !!\");\r\n    }\r\n    ngOnInit() {\r\n        this.currentUser = this.token.getUser();\r\n        this.accesForm = new FormGroup({\r\n            email: new FormControl(''),\r\n            id_doctor: new FormControl(''),\r\n            adaugareTratament: new FormControl('', Validators.required),\r\n            adaugareRadiografie: new FormControl('', Validators.required),\r\n            stergereCont: new FormControl('', Validators.required),\r\n            afisareFormular: new FormControl('', Validators.required)\r\n        });\r\n        this.userService.findUser(this.currentUser.email).subscribe({\r\n            next: (response) => {\r\n                this.loggedInUser = response;\r\n                console.log(this.loggedInUser);\r\n                this.userService.findUsersByEmail(this.loggedInUser.id).subscribe({\r\n                    next: (response) => {\r\n                        this.users = response;\r\n                        console.log(this.users);\r\n                    },\r\n                    error: (error) => {\r\n                        alert(error.message);\r\n                    }\r\n                });\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    onSubmit(accesForm) {\r\n        this.submitted = true;\r\n        if (accesForm.valid) {\r\n            this.accesForm.value['id_doctor'] = this.loggedInUser.id;\r\n            this.accesService.deleteAcces(this.accesForm.value['email']).subscribe({\r\n                next: () => {\r\n                    console.log(\"deleted\");\r\n                    this.accesService.addAcces(accesForm.value).subscribe({\r\n                        next: async (response) => {\r\n                            console.log(this.users);\r\n                            this.showToasterSuccess();\r\n                            await new Promise(f => setTimeout(f, 1000));\r\n                            window.location.reload();\r\n                            this.submitted = false;\r\n                        },\r\n                        error: (error) => {\r\n                            alert(error.message);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\nAccesComponent = __decorate([\r\n    Component({\r\n        selector: 'app-acces',\r\n        templateUrl: './acces.component.html',\r\n        styleUrls: ['./acces.component.css']\r\n    })\r\n], AccesComponent);\r\nexport { AccesComponent };\r\n"]},"metadata":{},"sourceType":"module"}