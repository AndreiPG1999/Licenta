{"ast":null,"code":"import _asyncToGenerator from \"D:/Licenta/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Email } from '../email';\nlet ContactDoctorComponent = class ContactDoctorComponent {\n  constructor(notifyService, userService, token) {\n    this.notifyService = notifyService;\n    this.userService = userService;\n    this.token = token;\n    this.mail = new Email();\n    this.submitted = false;\n  }\n\n  showToasterSuccess() {\n    this.notifyService.showSuccess(\"Your message was submitted successfully !!\");\n  }\n\n  ngOnInit() {\n    this.currentUser = this.token.getUser();\n    this.contactForm = new FormGroup({\n      name: new FormControl('', [Validators.required]),\n      message: new FormControl('', [Validators.required])\n    });\n  }\n\n  onSubmit(contactForm) {\n    var _this = this;\n\n    this.mail.name = this.contactForm.get('name').value;\n    this.mail.email = this.currentUser.email;\n    this.mail.message = this.contactForm.get('message').value;\n    this.submitted = true;\n\n    if (contactForm.valid) {\n      this.userService.sendEmail(this.mail).subscribe({\n        next: function () {\n          var _ref = _asyncToGenerator(function* (response) {\n            console.log(response);\n\n            _this.showToasterSuccess();\n\n            yield new Promise(f => setTimeout(f, 1000));\n            contactForm.reset();\n            _this.submitted = false;\n          });\n\n          return function next(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }(),\n        error: error => {\n          alert(error.message);\n        }\n      });\n    }\n  }\n\n};\nContactDoctorComponent = __decorate([Component({\n  selector: 'app-contact-doctor',\n  templateUrl: './contact-doctor.component.html',\n  styleUrls: ['./contact-doctor.component.css']\n})], ContactDoctorComponent);\nexport { ContactDoctorComponent };","map":{"version":3,"sources":["D:/Licenta/Front/src/app/contact-doctor/contact-doctor.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","Validators","Email","ContactDoctorComponent","constructor","notifyService","userService","token","mail","submitted","showToasterSuccess","showSuccess","ngOnInit","currentUser","getUser","contactForm","name","required","message","onSubmit","get","value","email","valid","sendEmail","subscribe","next","response","console","log","Promise","f","setTimeout","reset","error","alert","selector","templateUrl","styleUrls"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,eAA1B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,gBAAnD;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,IAAIC,sBAAsB,GAAG,MAAMA,sBAAN,CAA6B;AACtDC,EAAAA,WAAW,CAACC,aAAD,EAAgBC,WAAhB,EAA6BC,KAA7B,EAAoC;AAC3C,SAAKF,aAAL,GAAqBA,aAArB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,IAAL,GAAY,IAAIN,KAAJ,EAAZ;AACA,SAAKO,SAAL,GAAiB,KAAjB;AACH;;AACDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKL,aAAL,CAAmBM,WAAnB,CAA+B,4CAA/B;AACH;;AACDC,EAAAA,QAAQ,GAAG;AACP,SAAKC,WAAL,GAAmB,KAAKN,KAAL,CAAWO,OAAX,EAAnB;AACA,SAAKC,WAAL,GAAmB,IAAIf,SAAJ,CAAc;AAC7BgB,MAAAA,IAAI,EAAE,IAAIjB,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACgB,QAAZ,CAApB,CADuB;AAE7BC,MAAAA,OAAO,EAAE,IAAInB,WAAJ,CAAgB,EAAhB,EAAoB,CAACE,UAAU,CAACgB,QAAZ,CAApB;AAFoB,KAAd,CAAnB;AAIH;;AACDE,EAAAA,QAAQ,CAACJ,WAAD,EAAc;AAAA;;AAClB,SAAKP,IAAL,CAAUQ,IAAV,GAAiB,KAAKD,WAAL,CAAiBK,GAAjB,CAAqB,MAArB,EAA6BC,KAA9C;AACA,SAAKb,IAAL,CAAUc,KAAV,GAAkB,KAAKT,WAAL,CAAiBS,KAAnC;AACA,SAAKd,IAAL,CAAUU,OAAV,GAAoB,KAAKH,WAAL,CAAiBK,GAAjB,CAAqB,SAArB,EAAgCC,KAApD;AACA,SAAKZ,SAAL,GAAiB,IAAjB;;AACA,QAAIM,WAAW,CAACQ,KAAhB,EAAuB;AACnB,WAAKjB,WAAL,CAAiBkB,SAAjB,CAA2B,KAAKhB,IAAhC,EAAsCiB,SAAtC,CAAgD;AAC5CC,QAAAA,IAAI;AAAA,uCAAE,WAAOC,QAAP,EAAoB;AACtBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,YAAA,KAAI,CAACjB,kBAAL;;AACA,kBAAM,IAAIoB,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA3B,CAAN;AACAhB,YAAAA,WAAW,CAACkB,KAAZ;AACA,YAAA,KAAI,CAACxB,SAAL,GAAiB,KAAjB;AACH,WANG;;AAAA;AAAA;AAAA;AAAA,WADwC;AAQ5CyB,QAAAA,KAAK,EAAGA,KAAD,IAAW;AACdC,UAAAA,KAAK,CAACD,KAAK,CAAChB,OAAP,CAAL;AACH;AAV2C,OAAhD;AAYH;AACJ;;AArCqD,CAA1D;AAuCAf,sBAAsB,GAAGN,UAAU,CAAC,CAChCC,SAAS,CAAC;AACNsC,EAAAA,QAAQ,EAAE,oBADJ;AAENC,EAAAA,WAAW,EAAE,iCAFP;AAGNC,EAAAA,SAAS,EAAE,CAAC,gCAAD;AAHL,CAAD,CADuB,CAAD,EAMhCnC,sBANgC,CAAnC;AAOA,SAASA,sBAAT","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Email } from '../email';\r\nlet ContactDoctorComponent = class ContactDoctorComponent {\r\n    constructor(notifyService, userService, token) {\r\n        this.notifyService = notifyService;\r\n        this.userService = userService;\r\n        this.token = token;\r\n        this.mail = new Email();\r\n        this.submitted = false;\r\n    }\r\n    showToasterSuccess() {\r\n        this.notifyService.showSuccess(\"Your message was submitted successfully !!\");\r\n    }\r\n    ngOnInit() {\r\n        this.currentUser = this.token.getUser();\r\n        this.contactForm = new FormGroup({\r\n            name: new FormControl('', [Validators.required]),\r\n            message: new FormControl('', [Validators.required])\r\n        });\r\n    }\r\n    onSubmit(contactForm) {\r\n        this.mail.name = this.contactForm.get('name').value;\r\n        this.mail.email = this.currentUser.email;\r\n        this.mail.message = this.contactForm.get('message').value;\r\n        this.submitted = true;\r\n        if (contactForm.valid) {\r\n            this.userService.sendEmail(this.mail).subscribe({\r\n                next: async (response) => {\r\n                    console.log(response);\r\n                    this.showToasterSuccess();\r\n                    await new Promise(f => setTimeout(f, 1000));\r\n                    contactForm.reset();\r\n                    this.submitted = false;\r\n                },\r\n                error: (error) => {\r\n                    alert(error.message);\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\nContactDoctorComponent = __decorate([\r\n    Component({\r\n        selector: 'app-contact-doctor',\r\n        templateUrl: './contact-doctor.component.html',\r\n        styleUrls: ['./contact-doctor.component.css']\r\n    })\r\n], ContactDoctorComponent);\r\nexport { ContactDoctorComponent };\r\n"]},"metadata":{},"sourceType":"module"}