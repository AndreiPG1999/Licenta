{"ast":null,"code":"import _asyncToGenerator from \"D:/Licenta/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet AddProgramareComponent = class AddProgramareComponent {\n  constructor(appointmentService, notifyService, userService, token) {\n    this.appointmentService = appointmentService;\n    this.notifyService = notifyService;\n    this.userService = userService;\n    this.token = token;\n    this.submitted = false;\n  }\n\n  showToasterSuccess() {\n    this.notifyService.showSuccess(\"Programare înregistrată cu succes !!\");\n  }\n\n  ngOnInit() {\n    this.currentUser = this.token.getUser();\n    this.appointmentForm = new FormGroup({\n      email: new FormControl('', Validators.required),\n      data: new FormControl('', Validators.required),\n      ora_incepere: new FormControl('', Validators.required),\n      ora_finalizare: new FormControl('', Validators.required),\n      descriere: new FormControl('', Validators.required),\n      id_doctor: new FormControl('', Validators.required)\n    });\n    this.userService.findUser(this.currentUser.email).subscribe({\n      next: response => {\n        this.loggedInUser = response;\n        console.log(this.loggedInUser);\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n    this.getUsers();\n  }\n\n  getUsers() {\n    this.userService.getUsers().subscribe({\n      next: response => {\n        this.users = response;\n        console.log(this.users);\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  onSubmit(appointmentForm) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.submitted = true;\n\n      if (appointmentForm.valid) {\n        _this.appointmentService.addAppointment(appointmentForm.value).subscribe({\n          next: function () {\n            var _ref = _asyncToGenerator(function* (response) {\n              console.log(response);\n\n              _this.showToasterSuccess();\n\n              yield new Promise(f => setTimeout(f, 1000));\n              window.location.reload();\n              _this.submitted = false;\n            });\n\n            return function next(_x) {\n              return _ref.apply(this, arguments);\n            };\n          }(),\n          error: error => {\n            alert(error.message);\n          }\n        });\n      }\n    })();\n  }\n\n};\nAddProgramareComponent = __decorate([Component({\n  selector: 'app-add-programare',\n  templateUrl: './add-programare.component.html',\n  styleUrls: ['./add-programare.component.css']\n})], AddProgramareComponent);\nexport { AddProgramareComponent };","map":{"version":3,"sources":["D:/Licenta/Front/src/app/add-programare/add-programare.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","Validators","AddProgramareComponent","constructor","appointmentService","notifyService","userService","token","submitted","showToasterSuccess","showSuccess","ngOnInit","currentUser","getUser","appointmentForm","email","required","data","ora_incepere","ora_finalizare","descriere","id_doctor","findUser","subscribe","next","response","loggedInUser","console","log","error","alert","message","getUsers","users","onSubmit","valid","addAppointment","value","Promise","f","setTimeout","window","location","reload","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nlet AddProgramareComponent = class AddProgramareComponent {\r\n    constructor(appointmentService, notifyService, userService, token) {\r\n        this.appointmentService = appointmentService;\r\n        this.notifyService = notifyService;\r\n        this.userService = userService;\r\n        this.token = token;\r\n        this.submitted = false;\r\n    }\r\n    showToasterSuccess() {\r\n        this.notifyService.showSuccess(\"Programare înregistrată cu succes !!\");\r\n    }\r\n    ngOnInit() {\r\n        this.currentUser = this.token.getUser();\r\n        this.appointmentForm = new FormGroup({\r\n            email: new FormControl('', Validators.required),\r\n            data: new FormControl('', Validators.required),\r\n            ora_incepere: new FormControl('', Validators.required),\r\n            ora_finalizare: new FormControl('', Validators.required),\r\n            descriere: new FormControl('', Validators.required),\r\n            id_doctor: new FormControl('', Validators.required)\r\n        });\r\n        this.userService.findUser(this.currentUser.email).subscribe({\r\n            next: (response) => {\r\n                this.loggedInUser = response;\r\n                console.log(this.loggedInUser);\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n        this.getUsers();\r\n    }\r\n    getUsers() {\r\n        this.userService.getUsers().subscribe({\r\n            next: (response) => {\r\n                this.users = response;\r\n                console.log(this.users);\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    async onSubmit(appointmentForm) {\r\n        this.submitted = true;\r\n        if (appointmentForm.valid) {\r\n            this.appointmentService.addAppointment(appointmentForm.value).subscribe({\r\n                next: async (response) => {\r\n                    console.log(response);\r\n                    this.showToasterSuccess();\r\n                    await new Promise(f => setTimeout(f, 1000));\r\n                    window.location.reload();\r\n                    this.submitted = false;\r\n                },\r\n                error: (error) => {\r\n                    alert(error.message);\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\nAddProgramareComponent = __decorate([\r\n    Component({\r\n        selector: 'app-add-programare',\r\n        templateUrl: './add-programare.component.html',\r\n        styleUrls: ['./add-programare.component.css']\r\n    })\r\n], AddProgramareComponent);\r\nexport { AddProgramareComponent };\r\n"]},"metadata":{},"sourceType":"module"}