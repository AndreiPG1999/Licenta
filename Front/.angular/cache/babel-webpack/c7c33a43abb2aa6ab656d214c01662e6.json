{"ast":null,"code":"import _asyncToGenerator from \"D:/Licenta/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nlet NavbarPacientComponent = class NavbarPacientComponent {\n  constructor(accesService, token, userService, notifyService, router, formularService, istoricService, radiografieService) {\n    this.accesService = accesService;\n    this.token = token;\n    this.userService = userService;\n    this.notifyService = notifyService;\n    this.router = router;\n    this.formularService = formularService;\n    this.istoricService = istoricService;\n    this.radiografieService = radiografieService;\n    this.display = \"none\";\n  }\n\n  showToasterSuccess() {\n    this.notifyService.showSuccess(\"Cont sters cu succes !!\");\n  }\n\n  ngOnInit() {\n    this.currentUser = this.token.getUser();\n    this.addRadiografieForm = new FormGroup({\n      email: new FormControl(''),\n      id_doctor: new FormControl('')\n    });\n    this.userService.findUser(this.currentUser.email).subscribe({\n      next: response => {\n        this.loggedInUser = response;\n        console.log(this.loggedInUser);\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n    this.getAcces();\n  }\n\n  clickMethod() {\n    var _this = this;\n\n    if (confirm(\"Sunteți sigur că doriți să ștergeți contul?\")) {\n      this.userService.deleteUser(this.currentUser.email).subscribe({\n        next: function () {\n          var _ref = _asyncToGenerator(function* () {\n            _this.showToasterSuccess();\n\n            _this.deleteFormular();\n\n            _this.deleteIstoric();\n\n            yield new Promise(f => setTimeout(f, 2000));\n\n            _this.router.navigate(['/login']);\n          });\n\n          return function next() {\n            return _ref.apply(this, arguments);\n          };\n        }(),\n        error: error => {\n          alert(error.message);\n        }\n      });\n    }\n  }\n\n  getAcces() {\n    var _this2 = this;\n\n    this.accesService.findAcces(this.currentUser.email).subscribe({\n      next: function () {\n        var _ref2 = _asyncToGenerator(function* (response) {\n          _this2.accesList = response;\n          console.log(_this2.accesList);\n        });\n\n        return function next(_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  deleteFormular() {\n    this.formularService.deleteFormular(this.currentUser.email).subscribe({});\n  }\n\n  deleteIstoric() {\n    this.istoricService.deleteIstoric(this.currentUser.email).subscribe({});\n  }\n\n  onCloseModal() {\n    this.display = \"none\";\n  }\n\n  onOpenModal() {\n    this.display = \"block\";\n  }\n\n  onFileChanged(event) {\n    //Select File\n    this.selectedFile = event.target.files[0];\n  }\n\n  onUpload() {\n    var _this3 = this;\n\n    console.log(this.selectedFile); //FormData API provides methods and properties to allow us easily prepare form data to be sent with POST HTTP requests.\n\n    const uploadImageData = new FormData();\n    uploadImageData.append('imageFile', this.selectedFile, this.selectedFile.name); //Make a call to the Spring Boot Application to save the image\n\n    this.addRadiografieForm.value['email'] = this.loggedInUser.email;\n    this.addRadiografieForm.value['id_doctor'] = this.loggedInUser.id_doctor;\n    this.radiografieService.addRadiografie(uploadImageData, this.addRadiografieForm.value['email'], this.addRadiografieForm.value['id_doctor']).subscribe({\n      next: function () {\n        var _ref3 = _asyncToGenerator(function* (response) {\n          console.log(response);\n\n          _this3.onCloseModal();\n        });\n\n        return function next(_x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n};\nNavbarPacientComponent = __decorate([Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})], NavbarPacientComponent);\nexport { NavbarPacientComponent };","map":{"version":3,"sources":["D:/Licenta/Front/src/app/navbar/navbar.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","NavbarPacientComponent","constructor","accesService","token","userService","notifyService","router","formularService","istoricService","radiografieService","display","showToasterSuccess","showSuccess","ngOnInit","currentUser","getUser","addRadiografieForm","email","id_doctor","findUser","subscribe","next","response","loggedInUser","console","log","error","alert","message","getAcces","clickMethod","confirm","deleteUser","deleteFormular","deleteIstoric","Promise","f","setTimeout","navigate","findAcces","accesList","onCloseModal","onOpenModal","onFileChanged","event","selectedFile","target","files","onUpload","uploadImageData","FormData","append","name","value","addRadiografie","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nlet NavbarPacientComponent = class NavbarPacientComponent {\r\n    constructor(accesService, token, userService, notifyService, router, formularService, istoricService, radiografieService) {\r\n        this.accesService = accesService;\r\n        this.token = token;\r\n        this.userService = userService;\r\n        this.notifyService = notifyService;\r\n        this.router = router;\r\n        this.formularService = formularService;\r\n        this.istoricService = istoricService;\r\n        this.radiografieService = radiografieService;\r\n        this.display = \"none\";\r\n    }\r\n    showToasterSuccess() {\r\n        this.notifyService.showSuccess(\"Cont sters cu succes !!\");\r\n    }\r\n    ngOnInit() {\r\n        this.currentUser = this.token.getUser();\r\n        this.addRadiografieForm = new FormGroup({\r\n            email: new FormControl(''),\r\n            id_doctor: new FormControl('')\r\n        });\r\n        this.userService.findUser(this.currentUser.email).subscribe({\r\n            next: (response) => {\r\n                this.loggedInUser = response;\r\n                console.log(this.loggedInUser);\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n        this.getAcces();\r\n    }\r\n    clickMethod() {\r\n        if (confirm(\"Sunteți sigur că doriți să ștergeți contul?\")) {\r\n            this.userService.deleteUser(this.currentUser.email).subscribe({\r\n                next: async () => {\r\n                    this.showToasterSuccess();\r\n                    this.deleteFormular();\r\n                    this.deleteIstoric();\r\n                    await new Promise(f => setTimeout(f, 2000));\r\n                    this.router.navigate(['/login']);\r\n                },\r\n                error: (error) => {\r\n                    alert(error.message);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    getAcces() {\r\n        this.accesService.findAcces(this.currentUser.email).subscribe({\r\n            next: async (response) => {\r\n                this.accesList = response;\r\n                console.log(this.accesList);\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    deleteFormular() {\r\n        this.formularService.deleteFormular(this.currentUser.email).subscribe({});\r\n    }\r\n    deleteIstoric() {\r\n        this.istoricService.deleteIstoric(this.currentUser.email).subscribe({});\r\n    }\r\n    onCloseModal() {\r\n        this.display = \"none\";\r\n    }\r\n    onOpenModal() {\r\n        this.display = \"block\";\r\n    }\r\n    onFileChanged(event) {\r\n        //Select File\r\n        this.selectedFile = event.target.files[0];\r\n    }\r\n    onUpload() {\r\n        console.log(this.selectedFile);\r\n        //FormData API provides methods and properties to allow us easily prepare form data to be sent with POST HTTP requests.\r\n        const uploadImageData = new FormData();\r\n        uploadImageData.append('imageFile', this.selectedFile, this.selectedFile.name);\r\n        //Make a call to the Spring Boot Application to save the image\r\n        this.addRadiografieForm.value['email'] = this.loggedInUser.email;\r\n        this.addRadiografieForm.value['id_doctor'] = this.loggedInUser.id_doctor;\r\n        this.radiografieService.addRadiografie(uploadImageData, this.addRadiografieForm.value['email'], this.addRadiografieForm.value['id_doctor']).subscribe({\r\n            next: async (response) => {\r\n                console.log(response);\r\n                this.onCloseModal();\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n};\r\nNavbarPacientComponent = __decorate([\r\n    Component({\r\n        selector: 'app-navbar',\r\n        templateUrl: './navbar.component.html',\r\n        styleUrls: ['./navbar.component.css']\r\n    })\r\n], NavbarPacientComponent);\r\nexport { NavbarPacientComponent };\r\n"]},"metadata":{},"sourceType":"module"}