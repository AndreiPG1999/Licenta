{"ast":null,"code":"import _asyncToGenerator from \"D:/Licenta/Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet AddTreatmentComponent = class AddTreatmentComponent {\n  constructor(istoricService, notifyService, userService, treatmentService, diagnosticSerivce, token) {\n    this.istoricService = istoricService;\n    this.notifyService = notifyService;\n    this.userService = userService;\n    this.treatmentService = treatmentService;\n    this.diagnosticSerivce = diagnosticSerivce;\n    this.token = token;\n    this.submitted = false;\n  }\n\n  showToasterSuccess() {\n    this.notifyService.showSuccess(\"Date adaugate cu succes !!\");\n  }\n\n  ngOnInit() {\n    this.currentUser = this.token.getUser();\n    this.treatmentForm = new FormGroup({\n      email_pacient: new FormControl(''),\n      treatment: new FormControl(''),\n      diagnostic: new FormControl(''),\n      pret: new FormControl('', [Validators.required, Validators.pattern('^[0-9-]+$')]),\n      dinte: new FormControl('', Validators.required)\n    });\n    this.userService.findUser(this.currentUser.email).subscribe({\n      next: response => {\n        this.loggedInUser = response;\n        console.log(this.loggedInUser);\n        this.userService.findUsersByEmail(this.loggedInUser.id).subscribe({\n          next: response => {\n            this.users = response;\n            console.log(this.users);\n          },\n          error: error => {\n            alert(error.message);\n          }\n        });\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n    this.getDiagnostics();\n    this.getTreatments();\n    this.getUsers();\n  }\n\n  getUsers() {\n    this.userService.getUsers().subscribe({\n      next: response => {\n        this.users = response;\n        console.log(this.users);\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  getDiagnostics() {\n    this.diagnosticSerivce.getDiagnostics().subscribe({\n      next: response => {\n        this.diagnostics = response;\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  getTreatments() {\n    this.treatmentService.getTreatments().subscribe({\n      next: response => {\n        this.treatments = response;\n      },\n      error: error => {\n        alert(error.message);\n      }\n    });\n  }\n\n  onSubmit(treatmentForm) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.submitted = true;\n\n      if (treatmentForm.valid) {\n        _this.istoricService.addIstoric(treatmentForm.value).subscribe({\n          next: function () {\n            var _ref = _asyncToGenerator(function* (response) {\n              console.log(response);\n\n              _this.showToasterSuccess();\n\n              yield new Promise(f => setTimeout(f, 1000));\n              window.location.reload();\n              _this.submitted = false;\n            });\n\n            return function next(_x) {\n              return _ref.apply(this, arguments);\n            };\n          }(),\n          error: error => {\n            alert(error.message);\n          }\n        });\n      }\n    })();\n  }\n\n};\nAddTreatmentComponent = __decorate([Component({\n  selector: 'app-add-treatment',\n  templateUrl: './add-treatment.component.html',\n  styleUrls: ['./add-treatment.component.css']\n})], AddTreatmentComponent);\nexport { AddTreatmentComponent };","map":{"version":3,"sources":["D:/Licenta/Front/src/app/add-treatment/add-treatment.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","Validators","AddTreatmentComponent","constructor","istoricService","notifyService","userService","treatmentService","diagnosticSerivce","token","submitted","showToasterSuccess","showSuccess","ngOnInit","currentUser","getUser","treatmentForm","email_pacient","treatment","diagnostic","pret","required","pattern","dinte","findUser","email","subscribe","next","response","loggedInUser","console","log","findUsersByEmail","id","users","error","alert","message","getDiagnostics","getTreatments","getUsers","diagnostics","treatments","onSubmit","valid","addIstoric","value","Promise","f","setTimeout","window","location","reload","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nlet AddTreatmentComponent = class AddTreatmentComponent {\r\n    constructor(istoricService, notifyService, userService, treatmentService, diagnosticSerivce, token) {\r\n        this.istoricService = istoricService;\r\n        this.notifyService = notifyService;\r\n        this.userService = userService;\r\n        this.treatmentService = treatmentService;\r\n        this.diagnosticSerivce = diagnosticSerivce;\r\n        this.token = token;\r\n        this.submitted = false;\r\n    }\r\n    showToasterSuccess() {\r\n        this.notifyService.showSuccess(\"Date adaugate cu succes !!\");\r\n    }\r\n    ngOnInit() {\r\n        this.currentUser = this.token.getUser();\r\n        this.treatmentForm = new FormGroup({\r\n            email_pacient: new FormControl(''),\r\n            treatment: new FormControl(''),\r\n            diagnostic: new FormControl(''),\r\n            pret: new FormControl('', [Validators.required, Validators.pattern('^[0-9-]+$')]),\r\n            dinte: new FormControl('', Validators.required)\r\n        });\r\n        this.userService.findUser(this.currentUser.email).subscribe({\r\n            next: (response) => {\r\n                this.loggedInUser = response;\r\n                console.log(this.loggedInUser);\r\n                this.userService.findUsersByEmail(this.loggedInUser.id).subscribe({\r\n                    next: (response) => {\r\n                        this.users = response;\r\n                        console.log(this.users);\r\n                    },\r\n                    error: (error) => {\r\n                        alert(error.message);\r\n                    }\r\n                });\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n        this.getDiagnostics();\r\n        this.getTreatments();\r\n        this.getUsers();\r\n    }\r\n    getUsers() {\r\n        this.userService.getUsers().subscribe({\r\n            next: (response) => {\r\n                this.users = response;\r\n                console.log(this.users);\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    getDiagnostics() {\r\n        this.diagnosticSerivce.getDiagnostics().subscribe({\r\n            next: (response) => {\r\n                this.diagnostics = response;\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    getTreatments() {\r\n        this.treatmentService.getTreatments().subscribe({\r\n            next: (response) => {\r\n                this.treatments = response;\r\n            },\r\n            error: (error) => {\r\n                alert(error.message);\r\n            }\r\n        });\r\n    }\r\n    async onSubmit(treatmentForm) {\r\n        this.submitted = true;\r\n        if (treatmentForm.valid) {\r\n            this.istoricService.addIstoric(treatmentForm.value).subscribe({\r\n                next: async (response) => {\r\n                    console.log(response);\r\n                    this.showToasterSuccess();\r\n                    await new Promise(f => setTimeout(f, 1000));\r\n                    window.location.reload();\r\n                    this.submitted = false;\r\n                },\r\n                error: (error) => {\r\n                    alert(error.message);\r\n                }\r\n            });\r\n        }\r\n    }\r\n};\r\nAddTreatmentComponent = __decorate([\r\n    Component({\r\n        selector: 'app-add-treatment',\r\n        templateUrl: './add-treatment.component.html',\r\n        styleUrls: ['./add-treatment.component.css']\r\n    })\r\n], AddTreatmentComponent);\r\nexport { AddTreatmentComponent };\r\n"]},"metadata":{},"sourceType":"module"}